#include <Arduino.h>
#include <stdint.h>
#include "config.h"
#include <driver/ledc.h>
//definir salidas del sistema y sensor de temperatura
#define senstemp 34 
#define ledrojo  21
#define ledverde 22 
#define ledamarillo 19 
#define motorservo 2 

//definir canal, frecuencia y resolucion para PWM (hay canales internos)
#define canalrojo  8 
#define canalverde 9
#define canalamarillo 10
#define canalservo 0

#define freqPWM 50
#define resPWM 10

//Agregar varoables float para podes usar decimales
float sensortemp = 0;
float sensor = 0; 

volatile int centenas = 0; 
volatile int decenas = 0;
volatile int unidades = 0; 
volatile int digito = 0; 
//definición de pines para los segmentos, el punto y los dígitos del display de 7 segmentos
const int segment[] = {27,12,33,25,26,13,14};  
const int punto = 32;  
const int digitos[] = {18, 5, 23};  

//Variables a utiliza en ADAFRUIT
String color;

//se trabajará con un timer
//Se configura el timer
hw_timer_t *timer0 = NULL;

// Configurarlo para le funcionamiento en Adafruit
AdafruitIO_Feed *tempcanal = io.feed("Temperatura");
AdafruitIO_Feed *semaforocanal = io.feed("Servo");

//interrupciones del boton y su estructura
portMUX_TYPE mux = portMUX_INITIALIZER_UNLOCKED;

struct Button {
  const uint8_t PIN;
  bool pressed;
  bool laststate;
};

Button boton = {15, false, false};

void IRAM_ATTR BOTON_ISR(){
  portENTER_CRITICAL_ISR(&mux);
  boton.pressed = true;
  portEXIT_CRITICAL_ISR(&mux);
}
//declaración de funciones a utilizar durante el trabajo.
void funciontempe(void); 
void funcionsemaforo(void);
void funciondisplay(void); 
void printdisplay(int numero); 
void Timer(void);


  // Multiplexeo de los tres dígitos
 //Configuración para le primer digito(centenas)
  if (digito == 0) {
    digitalWrite(digitos[0], HIGH);
    digitalWrite(digitos[1], LOW);  
    digitalWrite(digitos[2], LOW);  
    printdisplay(centenas);
    digito = 1;
  } else if (digito == 1) {
     // Enciende el segundo dígito
    digitalWrite(digitos[0], LOW); 
    digitalWrite(digitos[1], HIGH);  
    digitalWrite(digitos[2], LOW);  
    printdisplay(decenas);
    digitalWrite(punto, LOW);  // Enciende el punto decimal
    
    digito = 2;
  } else if (digito == 2) {
    //enciende tercer digito (unidades)
    digitalWrite(digitos[0], LOW);
    digitalWrite(digitos[1], LOW);  
    digitalWrite(digitos[2], HIGH); 
    digitalWrite(punto, HIGH);  
    printdisplay(unidades);

    digito = 0;
  }

}
//funciones para las salidas
void rojo(void);
void verde(void);
void amarillo(void);
void servo(void);
void send(float enviar1, String enviar2);

void setup() {

rojo();
verde();
amarillo();
servo();

  //velocidad del serial monitor (monitor-speed)
  Serial.begin(115200);

  initTimer0();
//contadores para pasar por los arreglos
   for (int i = 0; i < 7; i++) {  
    pinMode(segment[i], OUTPUT);
  }
  pinMode(punto, OUTPUT);
  for (int i = 0; i < 3; i++) {
    pinMode(digitos[i], OUTPUT);
  }
//definir estado del boton
  pinMode(boton.PIN, INPUT_PULLUP);
  attachInterrupt(boton.PIN, BOTON_ISR, RISING);

  //Conexión con Adafruit (se observa en el serial print)
  while(! Serial);

  Serial.print("Conectando...");

  // Se conecta
  io.connect();

  // Se conecta al mismo internet (WiFi)
  while(io.status() < AIO_CONNECTED) {
    Serial.print(".");
    delay(250);
  }
// Se termina de conectar
  Serial.println();
  Serial.println(io.statusText());

}

void loop() {
//Adafruit se mantiene leyendo los datos
  io.run();
//Si el botón se presiona, se leen estas funciones presentadas y además, el serial_monitor lo presenta en pantalla para saber si se está leyendo correctamente
  if(boton.pressed != boton.laststate){
    if(boton.pressed){
    funciontempe();
    funcionsemaforo();
    funciondisplay();
    Serial.printf("centenas: %u \n", centenas); 
    Serial.printf("decenas: %u \n", decenas); 
    Serial.printf("unidades: %u \n", unidades); 
    enviar(sensor, color);
    boton.pressed = false;
    }
  }

boton.laststate = boton.pressed; 



delay(50);
}


void funciontempe(void){
sensortemp = analogRead(senstemp); //lee sensor

float voltaje = sensortemp * (3.3 / 4095.0);
  sensor = (voltaje * 100)+20;
Serial.printf("valor sin mapear: %f \n", sensortemp); //verificar valores sin mapear
Serial.printf("valor mapeado: %f \n", sensor); //verificar valores mapeados 
}
//en las leds y el servo se define el canal, frecuencia y resolución, además del pin al que se refiere.
void rojo(void){
  ledcSetup(canalrojo, freqPWM, resPWM); 
  ledcAttachPin(ledrojo, canalrojo); 
  ledcWrite(canalrojo, 0); 
}

void verde(void){
  ledcSetup(canalverde, freqPWM, resPWM); 
  ledcAttachPin(ledverde, canalverde); 
  ledcWrite(canalverde, 0); 
}

void amarillo(void){
  ledcSetup(canalamarillo, freqPWM, resPWM); 
  ledcAttachPin(ledamarillo, canalamarillo); 
  ledcWrite(canalamarillo, 0); 
}

void servo(void){
  ledcSetup(canalservo, freqPWM, resPWM); 
  ledcAttachPin(motorservo, canalservo); 
  ledcWrite(canalservo, 128); 
}
// en la función del semáforo de activan las leds dependiendo de la temperatura
void funcionsemaforo(void){
  //Si la temperatura es baja se activa la led verde y el servo se mueve a la izquierda
  if(sensor <=37.0){
    ledcWrite(canalverde, 1023);
    ledcWrite(canalrojo, 0);
    ledcWrite(canalamarillo, 0);
    ledcWrite(canalservo, 120);
    color = "#00ff00";
  }
//Si la temperatura es normal se activa la led amarilla y el servo se coloca en el centro
  if(sensor >37.0 & sensor <= 37.5){
    ledcWrite(canalverde, 0);
    ledcWrite(canalrojo, 0);
    ledcWrite(canalamarillo, 1023);
    ledcWrite(canalservo, 75);
    color = "#ffff00";
  }
// Si la temperatura es alta se enciende en led rojo y el motor se coloca a la derecha
  if(sensor >37.5){
    ledcWrite(canalverde, 0);
    ledcWrite(canalrojo, 1023);
    ledcWrite(canalamarillo, 0);
    ledcWrite(canalservo, 26);
    color = "#ff0000";
  }
}

void funciondisplay(void){
  //se definen las variables para poder utilizar decimales
  int temp = sensor*10;
  centenas = temp/100;
  temp = temp-(centenas*100);
  decenas = temp/10;
  temp = temp-(decenas*10);
  unidades = temp;
}
//Se definen los números de los dígitos del display con una matriz y una función posterior
void printdisplay(int num) {
  const int digits[10][7] = {
    {0, 0, 0, 0, 0, 0, 1},  // 0
    {1, 0, 0, 1, 1, 1, 1},  // 1
    {0, 0, 1, 0, 0, 1, 0},  // 2
    {0, 0, 0, 0, 1, 1, 0},  // 3
    {1, 0, 0, 1, 1, 0, 0},  // 4
    {0, 1, 0, 0, 1, 0, 0},  // 5
    {0, 1, 0, 0, 0, 0, 0},  // 6
    {0, 0, 0, 1, 1, 1, 1},  // 7
    {0, 0, 0, 0, 0, 0, 0},  // 8
    {0, 0, 0, 0, 1, 0, 0}   // 9
  };

  for (int i = 0; i < 7; i++) {
    digitalWrite(segment[i], digits[num][i]);
  }
}
